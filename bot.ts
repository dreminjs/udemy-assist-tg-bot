import { Bot, InlineKeyboard, session, Context, SessionFlavor } from "grammy";
import * as dotenv from "dotenv";
import { findPrice } from "./parser";
import { getCourse } from "./currency";

dotenv.config();

interface SessionData {
  step: string | null;
  courseData: {
    title: string;
    price: number;
  };
}

type MyContext = Context & SessionFlavor<SessionData>;

const bot = new Bot<MyContext>(
  process.env.TOKEN || "7277823713:AAEsa6S2pNROUHJZPblkoKnehtseazMh9Bs"
);

bot.use(
  session({
    initial: (): SessionData => ({
      step: null,
      courseData: { title: "", price: 0 },
    }),
  })
);

bot.api.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" },
  { command: "send_link_course", description: "–ö—É–ø–∏—Ç—å –∫—É—Ä—Å" },
]);

bot.command("start", async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É  –∫—É—Ä—Å–æ–º", "send_link_course")
    .row()
    .url("–û—Ç–∫—Ä—ã—Ç—å Udemy", "https://www.udemy.com/");

  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç!\n–Ø –¢–ì-–±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Udemy  ",
    {
      reply_markup: keyboard,
      parse_mode: "HTML",
    }
  );
});

bot.command("send_link_course", async (ctx) => {
  try {
    ctx.session.step = "waiting_for_link"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å–µ—Å—Å–∏–∏
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∫—É—Ä—Å"); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã send_link_course:", error);
    await ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

bot.callbackQuery("send_link_course", async (ctx) => {
  try {
    ctx.session.step = "waiting_for_link";
    await ctx.answerCallbackQuery();
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∫—É—Ä—Å");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callbackQuery:", error);
    await ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

bot.callbackQuery("start", async (ctx) => {});

bot.on("message:text", async (ctx) => {
  if (ctx.session.step === "waiting_for_link") {
    const userLink = ctx.message.text;
    try {
      const url = new URL(userLink);
      if (url.hostname === "www.udemy.com" || url.hostname === "udemy.com") {
        ctx.session.step = null;
        const loadingMessage = await ctx.reply(
          "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        );

        try {
          const result = await findPrice(userLink);
          const course = await getCourse("USD", "RUB");

          const keyboard = new InlineKeyboard()
            .text("–ö—É–ø–∏—Ç—å –∫—É—Ä—Å", "buy_course")
            .text("–ù–∞–∑–∞–¥", "start");

          const totalPrice = result.price
            ? `${Math.round(result.price * course).toFixed(2)}‚ÇΩ`
            : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É";

          ctx.session.courseData = {
            title: result.title,
            price: +Math.round(result.price * course).toFixed(2),
          };

          ctx.session.step = "waiting_for_email";

          await ctx.api.editMessageText(
            ctx.chat.id,
            loadingMessage.message_id,
            `üìö *–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:* ${
              result.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }\nüíµ *–¶–µ–Ω–∞ –∫—É—Ä—Å–∞:* ${totalPrice} üõí`,
            {
              parse_mode: "Markdown",
              reply_markup: keyboard,
            }
          );
        } catch (err) {
          await ctx.api.editMessageText(
            ctx.chat.id,
            loadingMessage.message_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          );
        }
      } else {
        await ctx.reply("–°—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ udemy.com. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
      }
    } catch (e: any) {
      await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  } else if (ctx.session.step === "waiting_for_email") {
    ctx.session.step = null;
    const email = ctx.message.text;
    const courseData = ctx.session.courseData;

    const inlineKeyboard = new InlineKeyboard()
      .text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_order")
      .row()
      .text("–ù–∞–∑–∞–¥", "start");

    ctx.reply(
      `üìß *Email:* ${email}\nüìö *–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:* ${
        courseData.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      }\nüíµ *–¶–µ–Ω–∞ –∫—É—Ä—Å–∞:* ${courseData.price}‚ÇΩ üõí`,
      {
        parse_mode: "Markdown",
        reply_markup: inlineKeyboard,
      }
    );
  } else {
    await ctx.reply(
      "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    );
  }
});

bot.callbackQuery("buy_course", async (ctx) => {
  const courseData = ctx.session.courseData;
  if (courseData) {
    await ctx.reply(`–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç!`);
  } else {
    await ctx.reply("–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

bot.start({ onStart: () => console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!") });
